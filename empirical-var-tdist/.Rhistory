x <- point[[1]]
y <- point[[2]]
utility <- 2*x-x^2+2*x*y
ix <- utility/(2*x) - 1 + 0.5*x
matrix(c(xseq, ix), ncol = 2)
}
iy <- function(point, yseq = seq(0, 10000, 0.01)){
x <- point[[1]]
y <- point[[2]]
utility <- 10*y-2*x*y-y^2
iy <- 5-0.5*y-utility/(2*y)
matrix(c(iy, yseq), ncol = 2)
}
plot_indifference <- function(point, p1col="blue", p2col="red", ...){
p1 <- ix(point, ...)
lines(p1, col = p1col)
p2 <- iy(point, ...)
lines(p2, col = p2col)
}
p <- pareto(seq(0, 100, 0.01))
plot(p, cex = 0.2)
plot_indifference(p[1, ])
ix <- function(point, xseq = seq(0, 1000, 0.01)){
x <- point[[1]]
y <- point[[2]]
utility <- 2*x-x^2+2*x*y
ix <- utility/(2*x) - 1 + 0.5*x
matrix(c(xseq, ix), ncol = 2)
}
iy <- function(point, yseq = seq(0, 1000, 0.01)){
x <- point[[1]]
y <- point[[2]]
utility <- 10*y-2*x*y-y^2
iy <- 5-0.5*y-utility/(2*y)
matrix(c(iy, yseq), ncol = 2)
}
plot_indifference <- function(point, p1col="blue", p2col="red", ...){
p1 <- ix(point, ...)
lines(p1, col = p1col)
p2 <- iy(point, ...)
lines(p2, col = p2col)
}
p <- pareto(seq(0, 100, 0.01))
plot(p, cex = 0.2)
plot_indifference(p[1, ])
ix <- function(point, xseq = seq(0, 100, 0.01)){
x <- point[[1]]
y <- point[[2]]
utility <- 2*x-x^2+2*x*y
ix <- utility/(2*x) - 1 + 0.5*x
matrix(c(xseq, ix), ncol = 2)
}
iy <- function(point, yseq = seq(0, 100, 0.01)){
x <- point[[1]]
y <- point[[2]]
utility <- 10*y-2*x*y-y^2
iy <- 5-0.5*y-utility/(2*y)
matrix(c(iy, yseq), ncol = 2)
}
plot_indifference <- function(point, p1col="blue", p2col="red", ...){
p1 <- ix(point, ...)
lines(p1, col = p1col)
p2 <- iy(point, ...)
lines(p2, col = p2col)
}
p <- pareto(seq(0, 100, 0.01))
plot(p, cex = 0.2)
p
plot(p, cex = 0.2)
library(tidyverse)
mtcars
df <- as_tibble(mtcars)
df
tmp <- df %>%
mutate(cyl2 = as.character(cyl))
tmp
tmp %>%
ggplot() %>%
geom_point(x = mpg, y = wt, color = cyl2)
tmp %>%
ggplot() +
geom_point(x = mpg, y = wt, color = cyl2)
tmo
tmp
tmp$wt
tmp %>%
ggplot() +
geom_point(mpg, wt, color = cyl2)
tmp
tmp %>%
ggplot() +
geom_point(aes(mpg, wt, color = cyl2))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3))
tmp %>%
ggplot() +
geom_point(aes(mpg, wt))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3))
mtcars
df <- as_tibble(mtcars)
df
tmp <- df %>%
mutate(cyl2 = as.character(cyl))
tmp
# as character
tmp %>%
ggplot() +
geom_point(aes(mpg, wt, color = cyl2))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3)) +
geom_smooth(aes(mpg, wt))
mtcars
df <- as_tibble(mtcars)
df
tmp <- df %>%
mutate(cyl2 = as.character(cyl))
tmp
# as character
tmp %>%
ggplot() +
geom_point(aes(mpg, wt, color = cyl2))
# categorical variable
tmp <- tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3)) +
geom_smooth(aes(mpg, wt))
tmp
tmp
mtcars
df <- as_tibble(mtcars)
df
tmp <- df %>%
mutate(cyl2 = as.character(cyl))
tmp
# as character
tmp %>%
ggplot() +
geom_point(aes(mpg, wt, color = cyl2))
# categorical variable
tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_line(aes(mpg, wt, color = cyl3))
# categorical variable
tmp %>%
mutate(cyl3 = factor(cyl, levels = c(4, 6, 8), ordered = TRUE)) %>%
ggplot() +
geom_point(aes(mpg, wt, color = cyl3)) +
geom_smooth(aes(mpg, wt))
tmp %>%
ggplot() +
geom_boxplot(aes(x = cyl2, y = mpg))
tmp <- as_tibble(mtcars)
summary(tmp)
wurf <- sample(0:1, 1)
wurf
# 0 Tails, 1 Head
wurf <- sample(0:1, 1)
wurf
# 0 Tails, 1 Head
wurf <- sample(0:1, 1)
wurf
# 0 Tails, 1 Head
wurf <- sample(0:1, 1)
wurf
# 0 Tails, 1 Head
n <- 10
wurf <- sample(0:1, n)
# 0 Tails, 1 Head
n <- 10
wurf <- sample(0:1, n, replace = TRUE)
wurf
prop <- sum(wurf)/n
prop
wurf <- sample(0:1, n, replace = TRUE)
prop <- sum(wurf)/n
prop
wurf <- sample(0:1, n, replace = TRUE)
prop <- sum(wurf)/n
prop
library(rstan)
y <- arima.sim(list(ar = 0.5), n = 500)
plot.ts(y)
?rstan::sampling
ch <- rstan::sampling(NN, data = list(N = length(y), y = y))
ch <- rstan::sampling(NN, data = list(N = length(y), y = y))
ch <- rstan::sampling(NN, data = list(N = length(y), y = y))
ch <- rstan::sampling(NN, data = list(N = length(y), y = y))
x = c(1, 6, 6, 6.5, 6.5, 7, 7, 7.5, 8, 8, 9)
median(x)
x = c(1, 6, 6, 6, 6.5, 6.5, 7, 7, 7.5, 8, 8, 9)
median(x)
summary(x)
s <- sample(1:2, 100, replace = TRUE)
s
s <- sample(0:1, 100, replace = TRUE)
s
phat <- mean(s)
phat
z <- -qnorm(0.5/2)
se <- sqrt(phat * (1-phat) / n)
# Nullhypothese: p = 0.5
n <- 100
z <- -qnorm(0.5/2)
s <- sample(0:1, n, replace = TRUE)
s
phat <- mean(s)
phat
se <- sqrt(phat * (1-phat) / n)
se
interval <- c(phat - z*se, phat + z*se)
interval
inside <- 1*(0.5 %in% interval[1]:interval[2])
inside
inside_array <- c()
# Nullhypothese: p = 0.5
n <- 100
z <- -qnorm(0.5/2)
inside_array <- c()
for (i in 1:1000){
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
inside <- 1*(0.5 %in% interval[1]:interval[2])
inside_array <- c(inside_array, inside)
}
inside_array
for (i in 1:1000){
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
inside <- 1*(0.5 %in% interval[1]:interval[2])
inside_array <- c(inside_array, inside)
}
inside_array
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
phat
se
interval
0.5 %in% interval[1]:interval[2]
# Nullhypothese: p = 0.5
n <- 100
z <- -qnorm(0.5/2)
inside_array <- c()
for (i in 1:1000){
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
if (interval[1] <= 0.5 & interval[2] >= 0.5){
inside_array <- c(inside_array, 1)
}
else{
inside_array <- c(inside_array, 0)
}
}
inside_array
mean(inside_array)
z <- -qnorm(0.05/2)
inside_array <- c()
for (i in 1:1000){
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
if (interval[1] <= 0.5 & interval[2] >= 0.5){
inside_array <- c(inside_array, 1)
}
else{
inside_array <- c(inside_array, 0)
}
}
inside_array
mean(inside_array)
inside_array <- c()
for (i in 1:10000){
s <- sample(0:1, n, replace = TRUE)
phat <- mean(s)
se <- sqrt(phat * (1-phat) / n)
interval <- c(phat - z*se, phat + z*se)
if (interval[1] <= 0.5 & interval[2] >= 0.5){
inside_array <- c(inside_array, 1)
}
else{
inside_array <- c(inside_array, 0)
}
}
inside_array
mean(inside_array)
?chisq.test
y = arima.sim(list(ar = 0.5), n = 1000)
ac = acf(y, plot = FALSE)
ac[1]
y = arima.sim(list(ar = 0.8), n = 1000)
ac = acf(y, plot = FALSE)
ac[1]
0.8*(1-0.8^2)
var(y)
1/(1-0.8^2)
ac[2]
ac
ac[1]
ac[0]
ac[1]
mean(y)
y = arima.sim(list(ar = 0.8), n = 10000)
mean(y)
y = arima.sim(list(ar = 0.8), n = 100000)
mean(y)
y = arima.sim(list(ar = 0.8), n = 1000000)
mean(y)
plot(y)
y = arima.sim(list(ar = 0.8), n = 10000)
plot(y)
y = arima.sim(list(ar = 0.99), n = 10000)
plot(y)
mean(y)
y = arima.sim(list(ar = 0.99), n = 10000)
mean(y)
plot(y)
y = arima.sim(list(ar = 0.99), n = 10000) + 3
mean(y) - 3/(1-0.99)
plot(y)
y = arima.sim(list(ar = 0.99), n = 10000) + 300
plot(y)
mean(y) - 300
y = arima.sim(list(c = 300, ar = 0.99), n = 10000)
plot(y)
?arima.sim
library(BFluxR)
BFluxR_setup()
D = matrix(rnorm(500*3), ncol = 3)
D <- matrix(rnorm(500*3), ncol = 3)
tensor <- tensor_embed_mat(D, len_seq = 10+1)
tensor
y <- tensor[11, ,]
y
tensor
dim(tensor)
y <- tensor[11, ,]
dim(y)
y <- tensor[11, , ,]
y <- tensor[11, 1,]
dim(y)
length(y)
x <- tensor[1:10, , , drop = FALSE]
dim(x)
net <- Chain(RNN(3, 3), Dense(3, 1))
like_Gaussian <- likelihood.seqtoone_normal(net, Gamma(2.0, 0.5))
like_StudentT <- likelihood.seqtoone_tdist(net, Gamma(2.0, 0.5))
like_StudentT <- likelihood.seqtoone_tdist(net, Gamma(2.0, 0.5), nu = 5.0)
prior <- prior.gaussian(net, sigma = 0.5)
init_Gaussian <- initialise.allsame(Normal(0, 0.5), like_Gaussian, prior)
init_StudentT <- initialise.allsame(Normal(0, 0.5), like_StudentT, prior)
bnn_Guassian <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
bnn_StudentT <- BNN(x, y, like_StudentT, prior, init_StudentT)
sampler <- sampler.SGLD(stepsize_a = 1.0, stepsize_b = 0, stepsize_gamma = 0.55)
sampler <- sampler.SGLD(stepsize_a = 1.0, stepsize_b = 0, stepsize_gamma = 0.55)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
D <- matrix(rnorm(500*3), ncol = 3)
tensor <- tensor_embed_mat(D, len_seq = 10+1)
y <- tensor[11, 1,]
x <- tensor[1:10, , , drop = FALSE]
# Currently supported are RNN, LSTM, and Dense where the default
# activation for Dense is the identity function.
net <- Chain(RNN(3, 3), Dense(3, 1))
like_Gaussian <- likelihood.seqtoone_normal(net, Gamma(2.0, 0.5))
like_StudentT <- likelihood.seqtoone_tdist(net, Gamma(2.0, 0.5), nu = 5.0)
prior <- prior.gaussian(net, sigma = 0.5)
init_Gaussian <- initialise.allsame(Normal(0, 0.5), like_Gaussian, prior)
init_StudentT <- initialise.allsame(Normal(0, 0.5), like_StudentT, prior)
bnn_Guassian <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
bnn_StudentT <- BNN(x, y, like_StudentT, prior, init_StudentT)
sampler <- sampler.SGLD(stepsize_a = 1.0, stepsize_b = 0, stepsize_gamma = 0.55)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
bnn_Guassian <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
bnn <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
chain <- mcmc(bnn, 100, 10000, sampler)
rm(bnn)
bnn_Guassian <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
bnn_Gaussian <- BNN(x, y, like_Gaussian, prior, init_Gaussian)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
sampler <- sampler.SGNHTS(1e-2, sigmaA = 10, mu = 1)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
madapter <- madapter.FixedMassMatrix()
sadapter <- sadapter.DualAverage(adapt_steps = 1000, initial_stepsize = 1e-15)
sampler <- sampler.GGMC(beta = 0.5, l = 1e-15, sadapter = sadapter,
madapter = madapter, steps = 3)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
madapter <- madapter.FixedMassMatrix()
sadapter <- sadapter.DualAverage(adapt_steps = 1000,
initial_stepsize = 1e-15)
sampler <- sampler.GGMC(beta = 0.5, l = 1e-15, sadapter = sadapter,
madapter = madapter, steps = 3)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
madapter <- madapter.FixedMassMatrix()
sadapter <- sadapter.DualAverage(adapt_steps = 1000,
initial_stepsize = 1e-20)
sampler <- sampler.GGMC(beta = 0.5, l = 1e-20, sadapter = sadapter,
madapter = madapter, steps = 3)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
madapter <- madapter.FixedMassMatrix()
sadapter <- sadapter.DualAverage(adapt_steps = 1000,
initial_stepsize = 1e-40)
sampler <- sampler.GGMC(beta = 0.5, l = 1e-40, sadapter = sadapter,
madapter = madapter, steps = 3)
chain <- mcmc(bnn_Gaussian, 100, 10000, sampler)
vi <- bayes_by_backprop(bnn_Gaussian, 100, 1000)
chain <- vi.get_samples(vi, n = 10000)
library(BFluxR)
BFluxR_setup(env_path = "/tmp")
data <- matrix(rnorm(3*1000), ncol = 3)
tensor <- tensor_embed_mat(data, len_seq = 10+1)
y <- tensor[11, 1, ]
x <- tensor[1:10, , , drop = FALSE]
length(y)
dim(x)
net <- Chain(LSTM(3, 10), Dense(10, 10, "relu"), Dense(10, 1))
like <- likelihood.
like <- likelihood.seqtoone_normal(net, Gamma(2.0, 0.5))
prior <- prior.gaussian(net, 0.5)
init <- initialise.allsame(Normal(0, 0.5), like, prior)
bnn <- BNN(x, y, like, prior, init)
sampler <- sampler.SGLD(stepsize_a = 1.0)
ch <- mcmc(bnn, 100, 10000, sampler)
posterior_predictive_values <- posterior_predictive(bnn, ch)
library(BFluxR)
BFluxR_setup(env_path = "/tmp", pkg_check = FALSE)
data <- matrix(rnorm(3*1000), ncol = 3)
tensor <- tensor_embed_mat(data, len_seq = 10+1)
y <- tensor[11, 1, ]
x <- tensor[1:10, , , drop = FALSE]
net <- Chain(LSTM(3, 10), Dense(10, 10, "relu"), Dense(10, 1))
like <- likelihood.seqtoone_normal(net, Gamma(2.0, 0.5))
prior <- prior.gaussian(net, 0.5)
init <- initialise.allsame(Normal(0, 0.5), like, prior)
bnn <- BNN(x, y, like, prior, init)
sampler <- sampler.SGLD(stepsize_a = 1.0)
ch <- mcmc(bnn, 100, 10000, sampler)
posterior_predictive_values <- posterior_predictive(bnn, ch)
devtools::install_github("enweg/BFluxR")
library(BFluxR)
BFluxR_setup(env_path = "/tmp", pkg_check = FALSE)
data <- matrix(rnorm(3*1000), ncol = 3)
tensor <- tensor_embed_mat(data, len_seq = 10+1)
y <- tensor[11, 1, ]
x <- tensor[1:10, , , drop = FALSE]
net <- Chain(LSTM(3, 10), Dense(10, 10, "relu"), Dense(10, 1))
like <- likelihood.seqtoone_normal(net, Gamma(2.0, 0.5))
prior <- prior.gaussian(net, 0.5)
init <- initialise.allsame(Normal(0, 0.5), like, prior)
bnn <- BNN(x, y, like, prior, init)
sampler <- sampler.SGLD(stepsize_a = 1.0)
ch <- mcmc(bnn, 100, 10000, sampler)
posterior_predictive_values <- posterior_predictive(bnn, ch)
posterior_samples <- ch
posterior_predictive_values <- posterior_predictive(bnn, ch$samples)
setwd("~/Documents/RA Nalan/code/empirical-var/")
library(tidyverse)
df = read_csv("./evaluations/mcmc-single-chain-evaluation.csv")
df
df %>% arrange(rmse)
df %>% arrange(VaR_1_0)
summary(df)
df %>% arrange(mape)
df %>% arrange(-mape)
sample(0:1, 3, replace = TRUE)
paste0(sample(0:1, 3, replace = TRUE))
paste0(sample(0:1, 3, replace = TRUE), collapse = "")
paste0(sample(0:1, 3, replace = TRUE), collapse = "")
paste0(sample(0:1, 3, replace = TRUE), collapse = "")
paste0(sample(0:1, 3, replace = TRUE), collapse = "")
paste0(sample(0:1, 3, replace = TRUE), collapse = "")
rep(paste0(sample(0:1, 3, replace = TRUE), collapse = ""), 100)
replicate(paste0(sample(0:1, 3, replace = TRUE), collapse = ""), 3)
replicate(3, paste0(sample(0:1, 3, replace = TRUE), collapse = ""))
samples <- replicate(10000, paste0(sample(0:1, 3, replace = TRUE), collapse = ""))
samples
mean(samples == "110")
mean(samples = "100")
mean(samples == "100")
samples <- replicate(1000000, paste0(sample(0:1, 3, replace = TRUE), collapse = ""))
mean(samples == "100")
mean(samples == "110")
