ggplot(aes(x = time, y = intercept, group = group)) +
geom_line(alpha = 0.1)
# Even runs of the same network learn largely varying coefficient paths
# this might be due to the multimodality
# how does this relate to performance?
# Fact holds for all variables
ggmc %>%
filter(netid == 4) %>%
mutate(group = paste0(netid, "/", rep)) %>%
ggplot(aes(x = time, y = intercept, color = group)) +
geom_line(alpha = 0.1)
# Even runs of the same network learn largely varying coefficient paths
# this might be due to the multimodality
# how does this relate to performance?
# Fact holds for all variables
ggmc %>%
filter(netid == 4) %>%
mutate(group = paste0(netid, "/", rep)) %>%
ggplot(aes(x = time, y = intercept, color = group)) +
geom_line(alpha = 1)
# Even runs of the same network learn largely varying coefficient paths
# this might be due to the multimodality
# how does this relate to performance?
# Fact holds for all variables
ggmc %>%
filter(netid == 4) %>%
mutate(group = paste0(netid, "/", rep)) %>%
ggplot(aes(x = time, y = intercept, color = group)) +
geom_line(alpha = 1) +
xlab("") + ylab("Intercept Coefficient") +
theme_bw() +
theme(legend.position = "none")
# Even runs of the same network learn largely varying coefficient paths
# this might be due to the multimodality
# how does this relate to performance?
# Fact holds for all variables
p <- ggmc %>%
filter(netid == 4) %>%
mutate(group = paste0(netid, "/", rep)) %>%
ggplot(aes(x = time, y = intercept, color = group)) +
geom_line(alpha = 1) +
xlab("") + ylab("Intercept Coefficient") +
theme_bw() +
theme(legend.position = "none")
p
ggsave("./varying_coefficients.pdf", plot = p, device = "pdf", width = 15, height = 7)
# If intercept is very noisy, all others will be very noisy
# too or will have very little variation
ggmc %>%
filter(netid == 1 & rep == 10) %>%
mutate(group = paste0(netid, "/", rep)) %>%
ggplot(aes(x = time, y = intercept, group = group)) +
geom_line(alpha = 1)
# Taking averages across all runs better reveals the time variation.
# LSTM networks seem to estimate the intercept to be higher than RNN networks
ggmc %>%
group_by(netid, time) %>%
summarise(across(.cols = c(intercept, daily, weekly, monthly),
.fns = mean),
.groups = "drop") %>%
mutate(kind = ifelse(netid <= 2, "RNN", "LSTM")) %>%
ggplot(aes(x = time, y = intercept, group = netid, color = kind)) +
geom_line()
files <- list.files(path)
files <- files[str_detect(files, "stats")]
files_ggmc <- files[!str_detect(files, "bbb|baseline")]
files_bbb <- files[str_detect(files, "bbb")]
ggmc_stats <- do.call(rbind, lapply(paste0(path, files_ggmc), fread))
ggmc_stats <- as_tibble(ggmc_stats)
bbb_stats <- do.call(rbind, lapply(paste0(path, files_bbb), fread))
bbb_stats <- as_tibble(bbb_stats)
num_take <- 10
# How much coefficient vary seems to have no relationship to mixing
best_mixing <- ggmc_stats %>%
select(net, rep, rhat_sigma) %>%
arrange(rhat_sigma) %>%
head(num_take) %>%
mutate(mixing = "good") %>%
rename(netid = net)
worst_mixing <- ggmc_stats %>%
select(net, rep, rhat_sigma) %>%
arrange(rhat_sigma) %>%
tail(num_take) %>%
mutate(mixing = "bad") %>%
rename(netid = net)
best_mixing %>%
rbind(worst_mixing) %>%
mutate(netid = as.character(netid),
rep = as.character(rep),
group = paste0(netid, "/", rep)) %>%
inner_join(ggmc, by = c("netid", "rep")) %>%
ggplot(aes(x = time, y = intercept, group = group)) +
geom_line() +
facet_wrap(vars(mixing))
# How much coefficients vary seems to have nothing to do with RMSE
# Not in logs nor in levels
best <- ggmc_stats %>%
select(net, rep, rmse_level) %>%
arrange(rmse_level) %>%
head(num_take) %>%
mutate(stat = "good") %>%
rename(netid = net)
worst <- ggmc_stats %>%
select(net, rep, rmse_level) %>%
arrange(rmse_level) %>%
tail(num_take) %>%
mutate(stat = "bad") %>%
rename(netid = net)
best %>%
rbind(worst) %>%
mutate(netid = as.character(netid),
rep = as.character(rep),
group = paste0(netid, "/", rep)) %>%
inner_join(ggmc, by = c("netid", "rep")) %>%
ggplot(aes(x = time, y = intercept, group = group)) +
geom_line() +
facet_wrap(vars(stat))
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
ggmc %>%
filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_wrap(vars(group))
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(rows = vars(rep), cols = vars(netid))
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(rows = vars(rep), cols = vars(netid), scales = "free")
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
# facet_grid(rows = vars(rep), cols = vars(netid), scales = "free")
facet_wrap(netid ~ rep, scale = "free_y")
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(cols = vars(rep), rows = vars(netid), scales = "free")
ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
# mutate(across(.cols = c(intercept, daily, weekly, monthly),
#               .fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(cols = vars(rep), rows = vars(netid), scales = "free")
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
p <- ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(cols = vars(rep), rows = vars(netid), scales = "free")
# facet_wrap(vars(group))
p
ggsave("./coeffs_standardised.pdf", plot = p, device = "pdf", width = 25, height = 7)
# There always seem to be two, maybe three groups of time variation
# This only applies when time variation is standardised
p <- ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
mutate(across(.cols = c(intercept, daily, weekly, monthly),
.fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(cols = vars(rep), rows = vars(netid), scales = "free") +
xlab("") + ylab("Monthly Coefficient") +
theme_bw()
# facet_wrap(vars(group))
p
ggsave("./coeffs_standardised.pdf", plot = p, device = "pdf", width = 25, height = 7)
p <- ggmc %>%
# filter(netid == 1) %>%
mutate(group = paste0(netid, "/", rep)) %>%
group_by(netid, rep) %>%
# mutate(across(.cols = c(intercept, daily, weekly, monthly),
#               .fns = function(x) (x - mean(x))/sd(x))) %>%
ungroup() %>%
ggplot(aes(x = time, y = monthly)) +
geom_line(alpha = 1) +
facet_grid(cols = vars(rep), rows = vars(netid), scales = "free") +
xlab("") + ylab("Monthly Coefficient") +
theme_bw()
# facet_wrap(vars(group))
p
ggsave("./coeffs_raw.pdf", plot = p, device = "pdf", width = 25, height = 7)
library(tidyverse)
library(data.table)
rm(list = ls())
path <- "../"
files <- list.files(path)
files <- files[str_detect(files, "stats")]
files_ggmc <- files[!str_detect(files, "bbb|baseline")]
files_bbb <- files[str_detect(files, "bbb")]
files_baseline <- files[str_detect(files, "baseline")]
ggmc_stats <- do.call(rbind, lapply(paste0(path, files_ggmc), fread))
ggmc_stats <- as_tibble(ggmc_stats) %>% mutate(method = "GGMC")
bbb_stats <- do.call(rbind, lapply(paste0(path, files_bbb), fread))
bbb_stats <- as_tibble(bbb_stats) %>% mutate(method = "BBB")
baseline_stats <- read_csv(paste0(path, files_baseline))
baseline_rmse <- baseline_stats %>%
select(starts_with("rmse")) %>%
pivot_longer(everything(),
names_to = c(".value", "transform"),
names_sep = "_") %>%
mutate(transform = ifelse(transform == "level", "RV", "log(RV)")) %>%
rename(har_rmse = rmse)
baseline_var <- baseline_stats %>%
select(starts_with("VaR")) %>%
pivot_longer(everything(),
names_to = "measure",
values_to = "har_var")
# mixing does not seem to play an important role
ggmc_stats %>%
mutate(net = as.character(net)) %>%
select(net, rhat_sigma, starts_with("rmse")) %>%
pivot_longer(starts_with("rmse"),
names_to = c(".value", "transform"),
names_sep = "_") %>%
mutate(transform = ifelse(transform == "level", "RV", "log(RV)"),
good_mixing = rhat_sigma < 1.01) %>%
left_join(baseline_rmse, by = "transform") %>%
ggplot(aes(x = good_mixing, y = rmse)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_rmse, color = "HAR Benchmark")) +
facet_grid(cols = vars(net), rows = vars(transform), scales = "free") +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
xlab("Good Mixing") +
ylab("RMSE") +
theme_bw() +
theme(legend.position = "top")
# mixing does not seem to play an important role
p <- ggmc_stats %>%
mutate(net = as.character(net)) %>%
select(net, rhat_sigma, starts_with("rmse")) %>%
pivot_longer(starts_with("rmse"),
names_to = c(".value", "transform"),
names_sep = "_") %>%
mutate(transform = ifelse(transform == "level", "RV", "log(RV)"),
good_mixing = rhat_sigma < 1.01) %>%
left_join(baseline_rmse, by = "transform") %>%
ggplot(aes(x = good_mixing, y = rmse)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_rmse, color = "HAR Benchmark")) +
facet_grid(cols = vars(net), rows = vars(transform), scales = "free") +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
xlab("Good Mixing") +
ylab("RMSE") +
theme_bw() +
theme(legend.position = "top")
p
ggsave("./rmse_mixing.pdf", plot = p, device = "pdf", width = 15, height = 7)
stats <- rbind(select(ggmc_stats, -rhat_sigma), bbb_stats)
# GGMC performs clearly better for log RV
# Performance seems to be almost the same for RV in levels
# GGMC is much more consistent with performance though, shown by narrower boxes
stats %>%
mutate(net = as.character(net)) %>%
select(net, method, starts_with("rmse")) %>%
pivot_longer(starts_with("rmse"),
names_to = c(".value", "transform"),
names_sep = "_") %>%
mutate(transform = ifelse(transform == "level", "RV", "log(RV)")) %>%
left_join(baseline_rmse, by = "transform") %>%
ggplot(aes(x = net, y = rmse)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_rmse, color = "HAR Benchmark")) +
facet_grid(cols = vars(method), rows = vars(transform), scales = "free") +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
xlab("Network ID") +
ylab("RMSE") +
theme_bw() +
theme(legend.position = "top")
# GGMC performs clearly better for log RV
# Performance seems to be almost the same for RV in levels
# GGMC is much more consistent with performance though, shown by narrower boxes
p <- stats %>%
mutate(net = as.character(net)) %>%
select(net, method, starts_with("rmse")) %>%
pivot_longer(starts_with("rmse"),
names_to = c(".value", "transform"),
names_sep = "_") %>%
mutate(transform = ifelse(transform == "level", "RV", "log(RV)")) %>%
left_join(baseline_rmse, by = "transform") %>%
ggplot(aes(x = net, y = rmse)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_rmse, color = "HAR Benchmark")) +
facet_grid(cols = vars(method), rows = vars(transform), scales = "free") +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
xlab("Network ID") +
ylab("RMSE") +
theme_bw() +
theme(legend.position = "top")
p
ggsave("./performance_rmse.pdf", plot = p, device = "pdf", width = 15, height = 7)
var_translate = c(
"VaR_0_1" = "VaR 0.1%",
"VaR_1_0" = "VaR 1%",
"VaR_5_0" = "VaR 5%",
"VaR_10_0" = "VaR 10%"
)
var_target = c(
"VaR_0_1" = 0.001,
"VaR_1_0" = 0.01,
"VaR_5_0" = 0.05,
"VaR_10_0" = 0.1
)
var_ordering <- c("VaR 0.1%", "VaR 1%", "VaR 5%", "VaR 10%")
# Both not good for VaR
# BBB performance sensitive to network while GGMC performance
# is consistent
stats %>%
mutate(net = as.character(net)) %>%
select(net, method, starts_with("VaR")) %>%
pivot_longer(starts_with("VaR"),
names_to = "measure",
values_to = "values") %>%
left_join(baseline_var, by = "measure") %>%
mutate(target = var_target[measure],
measure = var_translate[measure],
measure = factor(measure, levels = var_ordering)) %>%
ggplot(aes(x = net, y = values)) +
geom_boxplot() +
geom_hline(aes(yintercept = target, color = "Target"), linetype = "dotted", size = 1) +
geom_hline(aes(yintercept = har_var, color = "HAR Benchmark"), size = 1) +
facet_grid(cols = vars(method), rows = vars(measure), scales = "free") +
scale_color_manual(values = c("Target" = "black", "HAR Benchmark" = "red")) +
scale_y_continuous(labels = scales::percent) +
guides(color = guide_legend(title = "")) +
xlab("Network ID") + ylab("% test data falling below VaR") +
theme_bw() +
theme(legend.position = "top")
# Both not good for VaR
# BBB performance sensitive to network while GGMC performance
# is consistent
p <- stats %>%
mutate(net = as.character(net)) %>%
select(net, method, starts_with("VaR")) %>%
pivot_longer(starts_with("VaR"),
names_to = "measure",
values_to = "values") %>%
left_join(baseline_var, by = "measure") %>%
mutate(target = var_target[measure],
measure = var_translate[measure],
measure = factor(measure, levels = var_ordering)) %>%
ggplot(aes(x = net, y = values)) +
geom_boxplot() +
geom_hline(aes(yintercept = target, color = "Target"), linetype = "dotted", size = 1) +
geom_hline(aes(yintercept = har_var, color = "HAR Benchmark"), size = 1) +
facet_grid(cols = vars(method), rows = vars(measure), scales = "free") +
scale_color_manual(values = c("Target" = "black", "HAR Benchmark" = "red")) +
scale_y_continuous(labels = scales::percent) +
guides(color = guide_legend(title = "")) +
xlab("Network ID") + ylab("% test data falling below VaR") +
theme_bw() +
theme(legend.position = "top")
p
ggsave('./performance_var.pdf', plot = p, device = "pdf", width = 15, height = 7)
library(tidyverse)
library(data.table)
rm(list = ls())
read_data <- function(f){
netid <- str_match(f, "net([0-9]*)")[,2]
rep <- str_match(f, "rep([0-9]*)")[,2]
tmp <- fread(f)
tmp[, netid := netid]
tmp[, rep := rep]
return(tmp)
}
path <- "../"
files <- list.files(path)
files <- files[str_detect(files, "qperformance")]
files_ggmc <- files[!str_detect(files, "bbb|baseline")]
files_bbb <- files[str_detect(files, "bbb")]
files_baseline <- files[str_detect(files, "baseline")]
ggmc_qperformance <- do.call(rbind, lapply(paste0(path, files_ggmc), read_data))
ggmc_qperformance <- as_tibble(ggmc_qperformance) %>% mutate(method = "GGMC")
bbb_qperformance <- do.call(rbind, lapply(paste0(path, files_bbb), read_data))
bbb_qperformance <- as_tibble(bbb_qperformance) %>% mutate(method = "BBB")
baseline_qperformance <- do.call(rbind, lapply(paste0(path, files_baseline), read_data))
baseline_qperformance <- as_tibble(baseline_qperformance) %>% mutate(method = "Baseline")
baseline_qperformacne <- baseline_qperformance %>%
select(observed, target) %>%
rename(har_qq = observed)
qperformance <- rbind(ggmc_qperformance, bbb_qperformance)
qperformance <- qperformance %>%
left_join(baseline_qperformacne, by = "target")
# - qqperformance is better for or more consistent for GGMC
# estimated models
# - Both models seem to especially struggle in the 10 to 60% range
qperformance %>%
ggplot(aes(x = target)) +
geom_line(aes(y = observed, group = rep), alpha = 0.3) +
geom_line(aes(y = har_qq, color = "HAR Benchmark"), linetype = "dotted", size = 1) +
geom_abline(aes(slope = 1, intercept = 0), linetype = "dashed", size = 1) +
facet_grid(rows = vars(netid), cols = vars(method)) +
scale_y_continuous(labels = scales::percent) +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
xlab("Target Quantile") +
ylab("% test data falling below quantile") +
guides(color = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "top")
# - qqperformance is better for or more consistent for GGMC
# estimated models
# - Both models seem to especially struggle in the 10 to 60% range
p <- qperformance %>%
ggplot(aes(x = target)) +
geom_line(aes(y = observed, group = rep), alpha = 0.3) +
geom_line(aes(y = har_qq, color = "HAR Benchmark"), linetype = "dotted", size = 1) +
geom_abline(aes(slope = 1, intercept = 0), linetype = "dashed", size = 1) +
facet_grid(rows = vars(netid), cols = vars(method)) +
scale_y_continuous(labels = scales::percent) +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
xlab("Target Quantile") +
ylab("% test data falling below quantile") +
guides(color = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "top")
p
ggsave("./qq_plot.pdf", plot = p, device = "pdf", width = 15, height = 7)
#  - Netowrk does not make a difference for GGMC but for BBB
# - For some reasons larger RNN network consistently bad results using BBB
# but not using GGMC
qperformance %>%
group_by(netid, rep, method) %>%
summarise(qqdiff = sum(abs(target - observed)),
har_qqdiff = sum(abs(target - har_qq)),
.groups = "drop") %>%
ggplot(aes(x = netid, y = qqdiff)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_qqdiff, color = "HAR Benchmark")) +
facet_grid(cols = vars(method)) +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
ylab("Quantile-Quantile Difference") +
xlab("Network ID") +
theme_bw() +
theme(legend.position = "top")
#  - Netowrk does not make a difference for GGMC but for BBB
# - For some reasons larger RNN network consistently bad results using BBB
# but not using GGMC
p <- qperformance %>%
group_by(netid, rep, method) %>%
summarise(qqdiff = sum(abs(target - observed)),
har_qqdiff = sum(abs(target - har_qq)),
.groups = "drop") %>%
ggplot(aes(x = netid, y = qqdiff)) +
geom_boxplot() +
geom_hline(aes(yintercept = har_qqdiff, color = "HAR Benchmark")) +
facet_grid(cols = vars(method)) +
scale_color_manual(values = c("HAR Benchmark" = "red")) +
guides(color = guide_legend(title = "")) +
ylab("Quantile-Quantile Difference") +
xlab("Network ID") +
theme_bw() +
theme(legend.position = "top")
p
ggsave("./qq_diff.pdf", plot = p, device = "pdf", width = 15, height = 7)
